-> Creating Forms with Flask-WTForms
    -> Installing Flask-WTForms
        -> Open your terminal and activate your virtual environment
        -> Run the command `pip install flask-wtf` to install Flask-WTForms
        -> Flask-WTForms is a powerful library that integrates Flask with the WTForms library, simplifying form handling and validation
        -> It provides built-in support for form fields, validators, and form rendering, making it easy to build secure and user-friendly forms in Flask applications

    -> Setting Up a Secret Key for Security
        -> Flask requires a secret key to protect against malicious attacks such as CSRF (Cross-Site Request Forgery)
        -> CSRF attacks occur when a malicious website or script attempts to perform actions on behalf of a logged-in user without their consent
        -> To protect user data, generate a random string for `SECRET_KEY` in your applicationâ€™s configuration
        -> Example: `app.config['SECRET_KEY'] = 'random_long_string_here'`
        -> Ensure this key is long, random, and kept private (never hardcode a secret key in production environments)
        -> This key is essential for Flask to secure user sessions, protect form submissions, and manage cookies safely
        -> Flask uses the secret key to sign cookies and session data, preventing tampering by malicious actors

    -> Creating the Form Class
        -> Import the base class `FlaskForm` from Flask-WTForms, which is used to create form classes
        -> `FlaskForm` provides the functionality to define form fields, handle form submissions, and perform validation
        -> Create a Python class that inherits from `FlaskForm` to define your form fields
        -> Example:
            ```python
            class MyForm(FlaskForm):
                name = StringField('Name', validators=[DataRequired()])
                submit = SubmitField('Submit')
            ```
        -> This class will contain all the necessary fields for the form (e.g., text inputs, checkboxes, submit buttons) as class variables

    -> Defining Form Fields
        -> Each form field in the `FlaskForm` class is defined by assigning an instance of a field class to a class variable
        -> WTForms provides different field types, such as `StringField` for text inputs, `SubmitField` for buttons, `PasswordField` for password inputs, etc.
        -> Example:
            ```python
            name = StringField('Name', validators=[DataRequired()])
            submit = SubmitField('Submit')
            ```
        -> In this example, `name` is a `StringField`, which will render as an HTML text input field, and `submit` is a `SubmitField`, which renders a submit button
        -> Fields can be initialised with additional parameters, such as a label and a list of validators
            -> The `DataRequired` validator ensures the user cannot submit the form without filling out the field
            -> Other validators can be added for email validation (`Email()`), length constraints (`Length(min=5, max=50)`), and more

    -> Validators for Form Fields
        -> Validators are used to enforce rules on the form input before processing it
        -> Commonly used validators include:
            -> `DataRequired`: Ensures the field is not left empty
            -> `Email`: Validates that the input is a properly formatted email address
            -> `Length`: Validates that the input length falls within a specified range
        -> Example:
            ```python
            email = StringField('Email', validators=[DataRequired(), Email()])
            password = PasswordField('Password', validators=[DataRequired(), Length(min=8)])
            ```
        -> These validators will be automatically applied when the form is submitted, and the form will reject any input that fails validation

    -> Rendering the Form Manually
        -> After defining the form class, you need to render the form in the HTML template
        -> The form is passed to the template via the `render_template` function in the Flask route
            -> In the route, return `render_template('template_name.html', form=form)`
            -> In the template, use `{{ form.field_name() }}` to render each form field individually
        -> Example:
            ```python
            @app.route('/submit', methods=['GET', 'POST'])
            def submit():
                form = MyForm()
                if form.validate_on_submit():
                    # process form data
                return render_template('submit.html', form=form)
            ```
        -> In the template, use the form fields:
            ```html
            <form method="POST">
                {{ form.hidden_tag() }}  <!-- CSRF protection -->
                <label for="name">Name</label>
                {{ form.name() }}  <!-- Render input field -->
                {{ form.submit() }}  <!-- Render submit button -->
            </form>
            ```
        -> Ensure to use the `method="POST"` attribute in the `<form>` tag to send the form data securely
        -> The `{{ form.hidden_tag() }}` tag generates hidden fields for CSRF protection
        -> Each field is rendered with the `{{ form.field_name() }}` syntax
            -> This renders the field, its label, and any associated validation errors
        -> Optionally, each field can be customised with HTML attributes (e.g., `id`, `class`, etc.) by passing the `render_kw` parameter to the field definition in the form class

    -> Handling Validation Errors in the Template
        -> If the user submits an invalid form, the form will contain errors for each field that failed validation
        -> To display these errors in the template, you can access the `errors` attribute for each field
        -> Example:
            ```html
            <form method="POST">
                {{ form.hidden_tag() }}
                <label for="name">Name</label>
                {{ form.name() }}
                {% if form.name.errors %}
                    <ul>
                        {% for error in form.name.errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}
                {{ form.submit() }}
            </form>
            ```
        -> This checks if there are any validation errors for the `name` field and displays them as a list

    -> Simpler Way to Render the Form with Flask-WTForms
        -> Flask-WTForms also offers a more efficient way to render the entire form in a single line of code
        -> Instead of manually rendering each field, you can use the `form` object directly in the template
            -> Example: `{{ form() }}`
        -> This renders all fields in the form automatically, without needing to manually call `form.field_name()` for each field
        -> To use this method, simply pass the `form` object to the template and render it directly
        -> Flask-WTForms integrates well with Bootstrap, and this automatic rendering will apply the appropriate Bootstrap classes to each form element

    -> Using Bootstrap with Flask-WTForms
        -> Flask-WTForms works seamlessly with the Bootstrap CSS framework
        -> When you use the `{{ form() }}` method to render the form, it automatically applies Bootstrap classes to form fields, such as `form-control` for inputs and `btn btn-primary` for submit buttons
        -> This makes the form visually appealing and responsive without needing additional CSS styling
        -> You can still customise the appearance by adding specific classes to individual fields (e.g., `render_kw={'class': 'form-control'}`)

    -> Testing the Form Rendering
        -> Once the form is set up and the route is defined, refresh your browser to ensure the form renders correctly
        -> Check that all fields are displayed, along with any labels, validation errors, and the submit button
        -> Verify that the form is styled appropriately (if using Bootstrap) and that the `POST` method is set correctly for secure form submission
        -> Test form validation by leaving fields empty or submitting invalid data, and check that appropriate error messages are displayed

    -> Processing Form Data
        -> After the form is submitted, Flask-WTForms will automatically handle form validation
        -> In the route, check if `form.validate_on_submit()` returns `True` to ensure the form is valid before processing the data
        -> Example:
            ```python
            if form.validate_on_submit():
                name = form.name.data
                # Do something with the form data (e.g., save to the database)
                return redirect(url_for('success'))
            ```
        -> After validation, you can access the form data via the `.data` attribute of each field (e.g., `form.name.data`)
        -> The next step is to handle the data and perform any necessary actions, such as saving it to the database
