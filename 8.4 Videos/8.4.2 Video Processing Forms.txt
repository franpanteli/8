-> Processing User Input, Session Handling, and Flash Messages in Flask
    -> Handling Form Method and Fixing the "Method Not Allowed" Error
        -> When submitting a form, Flask by default expects only GET requests for routes
        -> If a form submits data (using the POST method), Flask returns a "method not allowed" error, as POST wasn't specified in the route
        -> To fix this, explicitly specify which methods a route can handle by setting the `methods` argument in the route decorator
        -> Example:
            ```python
            @app.route("/submit", methods=["POST"])
            ```
        -> This tells Flask that this route will handle POST requests, and forms that send data via POST will now work without throwing the "method not allowed" error
        
    -> Capturing User Input
        -> Once the method issue is fixed, the next step is processing the form input
        -> To capture user input, you need a form field, which can be accessed using `form.<field_name>.data` after validating the input
        -> Example:
            ```python
            user_name = form.name.data  # Accesses the value entered in the 'name' field of the form
            ```
        -> It's important to validate the form input to ensure it's correct before processing it further
        -> You can check for validity using built-in form validation methods (e.g., checking if the input is not empty, matches a specific pattern, etc.)
        -> After validating, the captured data is processed, such as storing or displaying it on the page

    -> Passing User Input to the Template
        -> Once the input is processed, you need to pass the data to the HTML template to display it to the user
        -> Flask’s `render_template` function is used to send the input data to the template, where it can be rendered dynamically
        -> Example:
            ```python
            return render_template("welcome.html", name=user_name)
            ```
        -> In the template (e.g., `welcome.html`), you can display the captured user input using the `{{ name }}` placeholder, where `name` corresponds to the variable passed from the view function

    -> Preventing Form Resubmission on Page Refresh
        -> When a form is submitted, and the user refreshes the page, browsers may attempt to resend the POST request, causing the form to be resubmitted
        -> This behaviour can trigger unwanted errors and is known as "duplicate submission" or "form resubmission"
        -> A common approach to prevent this issue is by changing the final action after form submission from a POST request to a GET request
        -> This prevents browsers from resubmitting the form data on a refresh

    -> Using Redirect to Prevent Resubmission
        -> To avoid resubmitting a form on page reload, you can implement a redirect after the form submission
        -> The `redirect()` function in Flask sends the user to a different URL after the form is submitted, ensuring that the POST request isn't resubmitted upon page refresh
        -> The `redirect()` function works with Flask’s `url_for()` to specify the target URL, ensuring the proper routing
        -> Example:
            ```python
            return redirect(url_for("home"))
            ```
        -> `url_for("home")` generates the URL for the `home` view function, which is typically a route that uses GET, so it won't attempt to resubmit the form
        -> The browser will now perform a GET request, mapping to the `home` route, and the form is no longer resubmitted when the page is refreshed

    -> Session Variables to Remember User Input
        -> After using a redirect, the user’s input (such as their name) might no longer be remembered on the new page because the form data is cleared
        -> To retain user data between requests, Flask uses `session` variables, which store data across different page loads and sessions
        -> Session data persists even when the user refreshes the page or is redirected
        -> To store the user's name in the session, use:
            ```python
            session["user_name"] = user_name
            ```
        -> The `session` dictionary works like a typical Python dictionary, and you can store data as key-value pairs
        -> The session is stored in the user’s browser, so it remains accessible across requests

    -> Displaying User's Name Using Session Variables
        -> After storing the user's name in the session, you need to retrieve it in your template to display it
        -> In the template, use the `{{ session['user_name'] }}` placeholder to dynamically render the value stored in the session
        -> Example:
            ```html
            <h1>Welcome, {{ session['user_name'] }}!</h1>
            ```
        -> This ensures that the user's name will be displayed even after the page is refreshed or redirected

    -> Flash Messages to Display User Notifications
        -> Flask provides a feature called "flash messages" that allows you to send one-time messages to the user, such as success or error messages
        -> To send a flash message, call `flash()` in the view function, which stores the message in Flask's message queue
        -> Example:
            ```python
            flash("Form submitted successfully!")
            ```
        -> Flash messages are displayed in the templates after the form submission or other events to provide feedback to the user
        -> In the template, use the `get_flashed_messages()` function to retrieve and display any flash messages that were sent
        -> Example to display messages in the template:
            ```html
            {% with messages = get_flashed_messages() %}
                {% if messages %}
                    <ul>
                        {% for message in messages %}
                            <li>{{ message }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}
            {% endwith %}
            ```
        -> This renders a list of flash messages dynamically on the page

    -> Ensuring Flash Messages Appear Across All Templates
        -> To ensure flash messages are shown on every template, it's common practice to add the flash message rendering code to the base template
        -> The base template is usually extended by other templates, so by including the flash message block in the base, all pages will automatically display messages
        -> This makes it easier to maintain consistency in displaying user feedback across multiple pages of the application

    -> Final Testing
        -> After implementing session variables and flash messages, it's time to test the form behaviour again
        -> First, verify that the form can be submitted without encountering resubmission errors by refreshing the page
        -> Next, check that the user’s name is remembered across page reloads and redirects, using the session to retain the data
        -> Finally, ensure that the flash message feature works as expected, providing real-time feedback after form submissions or other actions
        -> If all works as intended, the application is now more robust, handling form submissions, session persistence, and user feedback effectively

    -> Summary
        -> In this video, you learned how to process user input in Flask, pass it to templates, and remember the input across page loads using session variables
        -> You also learned how to prevent accidental form resubmissions by using redirects, converting POST requests into GET requests
        -> Finally, you learned how to provide user feedback through flash messages, displaying messages such as success or error notifications
